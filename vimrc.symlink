filetype off
set nocompatible

" External plugins
" vim-plug set up
call plug#begin('~/.vim/plugged')

Plug 'luochen1990/rainbow'

Plug 'xolox/vim-misc'

Plug 'SirVer/ultisnips'

" Display indention-levels as characters.
Plug 'Yggdroot/indentLine'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1

Plug 'Shougo/deoplete-clangx'
Plug 'carlitux/deoplete-ternjs'
Plug 'deoplete-plugins/deoplete-go'
Plug 'deoplete-plugins/deoplete-jedi'

" Show trailing whitespace
"Plug 'ntpeters/vim-better-whitespace'

Plug 'metalelf0/supertab'

Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
"Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
"Plug 'tpope/vim-vinegar'

Plug 'mhinz/vim-signify'

Plug 'fatih/vim-go'

Plug 'altercation/vim-colors-solarized'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'google/vim-ft-bzl'

Plug 'junegunn/vim-peekaboo'

Plug 'kana/vim-textobj-user'
"Plug 'Julian/vim-textobj-variable-segment'

Plug 'vimwiki/vimwiki'

Plug 'itchyny/lightline.vim'
Plug 'w0rp/ale'

"Plug 'prabirshrestha/async.vim'
"Plug 'prabirshrestha/vim-lsp'

if filereadable(glob("~/.vimrc.local"))
  source ~/.vimrc.local
else
  call plug#end()
endif

let g:deoplete#enable_at_startup = 1

" Allow editing of crontab files.
set backupskip=/tmp/*,/private/tmp/*

" % for tags
source $VIMRUNTIME/macros/matchit.vim

set backspace=indent,eol,start

function EnableNormalTextChrome()
  " indentLine
  let g:indentLine_color_term = 239
  let g:indentLine_color_gui = '#09AA08'
  let g:indentLine_char = '│'
  " Add line numbers to side
  set number
  " Show tabs and eols
  set list!
  set listchars=tab:▸\ ,eol:¬
endfunction

function DisableNormalTextChrome()
  let g:indentLine_char = ''
  set nonumber
  set nolist!
endfunction

call EnableNormalTextChrome()

let mapleader = "\<SPACE>"

" copy file path
nmap <leader>cp :let @+=expand("%:p")<CR>

" search settings
set ignorecase
set smartcase

set smarttab
set expandtab

" 80chars by style-guide
set colorcolumn=80

augroup filetype_java
  autocmd!
  autocmd FileType java set colorcolumn=100
augroup END

" Use javascript formatter for json, because the actual json formatter is gross.
autocmd BufNewFile,BufRead *.json set ft=javascript

" nicer tab completion for file accessing
set wildmode=longest,list,full
set wildmenu

" Relative edits.
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

"-------------------------------------------------------------------------------
" netrw set up.
"-------------------------------------------------------------------------------

" Get rid of the banner
let g:netrw_banner = 0

"-------------------------------------------------------------------------------
" Color set up.
"-------------------------------------------------------------------------------
syntax enable
set background=dark
let g:solarized_termtrans = 1
colorscheme solarized

set hidden                        " Handle multiple buffers better.
set title                         " Set the terminal's title
set number                        " Show line numbers.
set ruler                         " Show cursor position.
set cursorline                    " Highlight current line
set wildmode=list:longest         " Complete files like a shell.
set wildmenu                      " Enhanced command line completion.
set wildignore=*.o,*.obj,*~       " Stuff to ignore when tab completing
set wildignore+=*/.git/objects/*
set wildignore+=*/.git/refs/*
set wildignore+=*/.hg/*,*/.svn/*
set wildignore+=*/tmp/*,*.so
set wildignore+=*.swp,*.zip

" small tweaks
set ttyfast                       " indicate a fast terminal connection
set tf                            " improve redrawing for newer computers
set nolazyredraw                  " turn off lazy redraw
set shell=/bin/bash

set visualbell
set noerrorbells
set history=1000                  " Store lots of :cmdline history

set scrolloff=3
set sidescrolloff=7

set splitbelow
set splitright

set sidescroll=1
set mouse-=a
set mousehide
if !has("nvim")
  set ttymouse=xterm2
endif
if exists("+inccommand")
  set inccommand=nosplit
endif

" Protect changes between writes. Default values of
" updatecount (200 keystrokes) and updatetime
" (4 seconds) are fine
set swapfile
set directory^=~/.vim/swap//

" protect against crash-during-write
set writebackup
" but do not persist backup after successful write
set nobackup
" use rename-and-write-new method whenever safe
set backupcopy=auto
" patch required to honor double slash at end
if has("patch-8.1.0251")
  " consolidate the writebackups -- not a big
  " deal either way, since they usually get deleted
  set backupdir^=~/.vim/backup//
end

" persist the undo tree for each file
set undofile
set undodir^=~/.vim/undo//

"###############################################################################
" Plugins
"###############################################################################

"-------------------------------------------------------------------------------
" vimwiki
"-------------------------------------------------------------------------------

let g:vimwiki_list = [{'path': '~/workspace/personal-wiki/'}]

"-------------------------------------------------------------------------------
" YCM
"-------------------------------------------------------------------------------
"let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"
"let g:EclimCompletionMethod = 'omnifunc'
"
"nnoremap <leader>jd :YcmCompleter GoTo<CR>
"
"" Add the ability to GoTo definition under cursor.
"nnoremap <leader>jd :YcmCompleter GoToDeclaration<CR>
"
"nnoremap gp `[v`]

"-------------------------------------------------------------------------------
" ultisnips
"-------------------------------------------------------------------------------
let g:UltiSnipsExpandTrigger="<c-g>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsSnippetDirectories=[$HOME . '/.dotfiles/vim/UltiSnips/']

"-------------------------------------------------------------------------------
" fzf
"-------------------------------------------------------------------------------
nnoremap <silent> <Leader><Leader> :FZF -m<CR>

nnoremap <silent> <Leader>s :call fzf#run({ 'tmux_height': winheight('.') / 2, 'sink': 'botright split' })<CR>
nnoremap <silent> <Leader>v :call fzf#run({ 'tmux_width': winwidth('.') / 2, 'sink': 'vertical botright split' })<CR>

function! BufList()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! BufOpen(e)
  execute 'buffer '. matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Leader><Enter> :call fzf#run({
\   'source':      reverse(BufList()),
\   'sink':        function('BufOpen'),
\   'options':     '+m',
\   'tmux_height': '40%'
\ })<CR>

"-------------------------------------------------------------------------------
" vim-markdown
"-------------------------------------------------------------------------------
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'java', 'cpp']

"-------------------------------------------------------------------------------
" lightline
"-------------------------------------------------------------------------------
set laststatus=2
set noshowmode

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

"-------------------------------------------------------------------------------
" vim-signify
"-------------------------------------------------------------------------------

let g:signify_vcs_list = ['git', 'hg', 'perforce']
let g:signify_skip_filename_pattern = ['\.pipertmp.*']
let g:signify_vcs_cmds = {'perforce':'DIFF=%d" -U0" citcdiff %f || [[ $? == 1 ]]'}


"-------------------------------------------------------------------------------
" ale
"-------------------------------------------------------------------------------
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

filetype plugin indent on
